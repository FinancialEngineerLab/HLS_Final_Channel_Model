-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_Modulation_Pipeline_VITIS_LOOP_60_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rand_bipolar_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    rand_bipolar_ce0 : OUT STD_LOGIC;
    rand_bipolar_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    rand_bipolar_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    rand_bipolar_ce1 : OUT STD_LOGIC;
    rand_bipolar_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    xr_2_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xr_2_write_assign_out_ap_vld : OUT STD_LOGIC;
    xr_3_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xr_3_write_assign_out_ap_vld : OUT STD_LOGIC;
    xr_1_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xr_1_write_assign_out_ap_vld : OUT STD_LOGIC;
    xi_0_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xi_0_write_assign_out_ap_vld : OUT STD_LOGIC;
    xi_1_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xi_1_write_assign_out_ap_vld : OUT STD_LOGIC;
    xr_0_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xr_0_write_assign_out_ap_vld : OUT STD_LOGIC;
    xi_2_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xi_2_write_assign_out_ap_vld : OUT STD_LOGIC;
    xi_3_write_assign_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    xi_3_write_assign_out_ap_vld : OUT STD_LOGIC;
    grp_fu_3389_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_3389_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_3389_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_3389_p_ce : OUT STD_LOGIC;
    grp_fu_3393_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_3393_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_3393_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_3393_p_ce : OUT STD_LOGIC );
end;


architecture behav of TOP_Modulation_Pipeline_VITIS_LOOP_60_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv64_3FF6A09E667F3BCD : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110110101000001001111001100110011111110011101111001101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln60_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln60_reg_349 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_349_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_349_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_349_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_296_fu_208_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_296_reg_353 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_296_reg_353_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_296_reg_353_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_296_reg_353_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_296_reg_353_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_16_cast10_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln62_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_54 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln60_fu_197_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_15 : STD_LOGIC_VECTOR (2 downto 0);
    signal xi_3_write_assign_fu_58 : STD_LOGIC_VECTOR (63 downto 0);
    signal xi_2_write_assign_fu_62 : STD_LOGIC_VECTOR (63 downto 0);
    signal xr_0_write_assign_fu_66 : STD_LOGIC_VECTOR (63 downto 0);
    signal xi_1_write_assign_fu_70 : STD_LOGIC_VECTOR (63 downto 0);
    signal xi_0_write_assign_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal xr_1_write_assign_fu_78 : STD_LOGIC_VECTOR (63 downto 0);
    signal xr_3_write_assign_fu_82 : STD_LOGIC_VECTOR (63 downto 0);
    signal xr_2_write_assign_fu_86 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_ddiv_64ns_64ns_64_5_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln60_fu_191_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_54 <= add_ln60_fu_197_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_54 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_296_reg_353_pp0_iter1_reg <= empty_296_reg_353;
                icmp_ln60_reg_349 <= icmp_ln60_fu_191_p2;
                icmp_ln60_reg_349_pp0_iter1_reg <= icmp_ln60_reg_349;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                empty_296_reg_353_pp0_iter2_reg <= empty_296_reg_353_pp0_iter1_reg;
                empty_296_reg_353_pp0_iter3_reg <= empty_296_reg_353_pp0_iter2_reg;
                empty_296_reg_353_pp0_iter4_reg <= empty_296_reg_353_pp0_iter3_reg;
                icmp_ln60_reg_349_pp0_iter2_reg <= icmp_ln60_reg_349_pp0_iter1_reg;
                icmp_ln60_reg_349_pp0_iter3_reg <= icmp_ln60_reg_349_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_191_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_296_reg_353 <= empty_296_fu_208_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (empty_296_reg_353_pp0_iter4_reg = ap_const_lv2_0))) then
                xi_0_write_assign_fu_74 <= grp_fu_3393_p_dout0;
                xr_0_write_assign_fu_66 <= grp_fu_3389_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (empty_296_reg_353_pp0_iter4_reg = ap_const_lv2_1))) then
                xi_1_write_assign_fu_70 <= grp_fu_3393_p_dout0;
                xr_1_write_assign_fu_78 <= grp_fu_3389_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (empty_296_reg_353_pp0_iter4_reg = ap_const_lv2_2))) then
                xi_2_write_assign_fu_62 <= grp_fu_3393_p_dout0;
                xr_2_write_assign_fu_86 <= grp_fu_3389_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (empty_296_reg_353_pp0_iter4_reg = ap_const_lv2_3))) then
                xi_3_write_assign_fu_58 <= grp_fu_3393_p_dout0;
                xr_3_write_assign_fu_82 <= grp_fu_3389_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln60_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_15) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln60_fu_191_p2)
    begin
        if (((icmp_ln60_fu_191_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_54, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_15 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_15 <= i_fu_54;
        end if; 
    end process;

    empty_296_fu_208_p1 <= ap_sig_allocacmp_i_15(2 - 1 downto 0);
    grp_fu_3389_p_ce <= ap_const_logic_1;
    grp_fu_3389_p_din0 <= rand_bipolar_q1;
    grp_fu_3389_p_din1 <= ap_const_lv64_3FF6A09E667F3BCD;
    grp_fu_3393_p_ce <= ap_const_logic_1;
    grp_fu_3393_p_din0 <= rand_bipolar_q0;
    grp_fu_3393_p_din1 <= ap_const_lv64_3FF6A09E667F3BCD;
    i_16_cast10_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_15),64));
    icmp_ln60_fu_191_p2 <= "1" when (ap_sig_allocacmp_i_15 = ap_const_lv3_4) else "0";
    rand_bipolar_address0 <= zext_ln62_fu_212_p1(2 - 1 downto 0);
    rand_bipolar_address1 <= i_16_cast10_fu_203_p1(2 - 1 downto 0);

    rand_bipolar_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rand_bipolar_ce0 <= ap_const_logic_1;
        else 
            rand_bipolar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rand_bipolar_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rand_bipolar_ce1 <= ap_const_logic_1;
        else 
            rand_bipolar_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xi_0_write_assign_out <= xi_0_write_assign_fu_74;

    xi_0_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xi_0_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xi_0_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xi_1_write_assign_out <= xi_1_write_assign_fu_70;

    xi_1_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xi_1_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xi_1_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xi_2_write_assign_out <= xi_2_write_assign_fu_62;

    xi_2_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xi_2_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xi_2_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xi_3_write_assign_out <= xi_3_write_assign_fu_58;

    xi_3_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xi_3_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xi_3_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xr_0_write_assign_out <= xr_0_write_assign_fu_66;

    xr_0_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xr_0_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xr_0_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xr_1_write_assign_out <= xr_1_write_assign_fu_78;

    xr_1_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xr_1_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xr_1_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xr_2_write_assign_out <= xr_2_write_assign_fu_86;

    xr_2_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xr_2_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xr_2_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xr_3_write_assign_out <= xr_3_write_assign_fu_82;

    xr_3_write_assign_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_349_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln60_reg_349_pp0_iter3_reg = ap_const_lv1_1))) then 
            xr_3_write_assign_out_ap_vld <= ap_const_logic_1;
        else 
            xr_3_write_assign_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln62_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_296_fu_208_p1),64));
end behav;
