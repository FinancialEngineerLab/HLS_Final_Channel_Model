-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_251_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    R_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    R_ce0 : OUT STD_LOGIC;
    R_we0 : OUT STD_LOGIC;
    R_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279985_lcssa1167_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901081_lcssa1231_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279982_lcssa1165_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901078_lcssa1229_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279979_lcssa1163_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901075_lcssa1227_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279988_lcssa1169_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901084_lcssa1233_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781033_lcssa1199_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791129_lcssa1263_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781030_lcssa1197_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791126_lcssa1261_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781027_lcssa1195_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791123_lcssa1259_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781036_lcssa1201_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791132_lcssa1265_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279972_lcssa1159_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901068_lcssa1223_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279969_lcssa1157_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901065_lcssa1221_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279966_lcssa1155_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901062_lcssa1219_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279975_lcssa1161_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901071_lcssa1225_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781020_lcssa1191_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791116_lcssa1255_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781017_lcssa1189_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791113_lcssa1253_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781014_lcssa1187_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791110_lcssa1251_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781023_lcssa1193_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791119_lcssa1257_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279960_lcssa1151_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901056_lcssa1215_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279957_lcssa1149_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901053_lcssa1213_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279954_lcssa1147_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901050_lcssa1211_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279963_lcssa1153_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901059_lcssa1217_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781008_lcssa1183_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791104_lcssa1247_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781005_lcssa1181_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791101_lcssa1245_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781002_lcssa1179_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791098_lcssa1243_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781011_lcssa1185_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791107_lcssa1249_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279996_lcssa1175_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901092_lcssa1239_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279993_lcssa1173_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901089_lcssa1237_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279990_lcssa1171_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901086_lcssa1235_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_03279999_lcssa1177_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23901095_lcssa1241_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781044_lcssa1207_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791140_lcssa1271_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781041_lcssa1205_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791137_lcssa1269_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781038_lcssa1203_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791134_lcssa1267_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032781047_lcssa1209_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_032791143_lcssa1273_reload : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_251_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln250_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln252_1_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_172 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln251_fu_871_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln250_1_fu_637_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_180 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln250_1_fu_605_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_848_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln251_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln250_fu_617_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln252_fu_645_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln250_fu_629_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_62_cast_fu_649_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln252_fu_657_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln252_fu_661_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_672_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_694_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_716_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_738_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_760_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_782_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_804_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_826_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_mux_84_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_84_16_1_1_U367 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_03279985_lcssa1167_reload,
        din1 => conv_i_i_i23901081_lcssa1231_reload,
        din2 => p_0_0_03279982_lcssa1165_reload,
        din3 => conv_i_i_i23901078_lcssa1229_reload,
        din4 => p_0_0_03279979_lcssa1163_reload,
        din5 => conv_i_i_i23901075_lcssa1227_reload,
        din6 => p_0_0_03279988_lcssa1169_reload,
        din7 => conv_i_i_i23901084_lcssa1233_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_8_fu_672_p10);

    mux_84_16_1_1_U368 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_032781033_lcssa1199_reload,
        din1 => p_0_0_032791129_lcssa1263_reload,
        din2 => p_0_0_032781030_lcssa1197_reload,
        din3 => p_0_0_032791126_lcssa1261_reload,
        din4 => p_0_0_032781027_lcssa1195_reload,
        din5 => p_0_0_032791123_lcssa1259_reload,
        din6 => p_0_0_032781036_lcssa1201_reload,
        din7 => p_0_0_032791132_lcssa1265_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_9_fu_694_p10);

    mux_84_16_1_1_U369 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_03279972_lcssa1159_reload,
        din1 => conv_i_i_i23901068_lcssa1223_reload,
        din2 => p_0_0_03279969_lcssa1157_reload,
        din3 => conv_i_i_i23901065_lcssa1221_reload,
        din4 => p_0_0_03279966_lcssa1155_reload,
        din5 => conv_i_i_i23901062_lcssa1219_reload,
        din6 => p_0_0_03279975_lcssa1161_reload,
        din7 => conv_i_i_i23901071_lcssa1225_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_10_fu_716_p10);

    mux_84_16_1_1_U370 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_032781020_lcssa1191_reload,
        din1 => p_0_0_032791116_lcssa1255_reload,
        din2 => p_0_0_032781017_lcssa1189_reload,
        din3 => p_0_0_032791113_lcssa1253_reload,
        din4 => p_0_0_032781014_lcssa1187_reload,
        din5 => p_0_0_032791110_lcssa1251_reload,
        din6 => p_0_0_032781023_lcssa1193_reload,
        din7 => p_0_0_032791119_lcssa1257_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_11_fu_738_p10);

    mux_84_16_1_1_U371 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_03279960_lcssa1151_reload,
        din1 => conv_i_i_i23901056_lcssa1215_reload,
        din2 => p_0_0_03279957_lcssa1149_reload,
        din3 => conv_i_i_i23901053_lcssa1213_reload,
        din4 => p_0_0_03279954_lcssa1147_reload,
        din5 => conv_i_i_i23901050_lcssa1211_reload,
        din6 => p_0_0_03279963_lcssa1153_reload,
        din7 => conv_i_i_i23901059_lcssa1217_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_12_fu_760_p10);

    mux_84_16_1_1_U372 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_032781008_lcssa1183_reload,
        din1 => p_0_0_032791104_lcssa1247_reload,
        din2 => p_0_0_032781005_lcssa1181_reload,
        din3 => p_0_0_032791101_lcssa1245_reload,
        din4 => p_0_0_032781002_lcssa1179_reload,
        din5 => p_0_0_032791098_lcssa1243_reload,
        din6 => p_0_0_032781011_lcssa1185_reload,
        din7 => p_0_0_032791107_lcssa1249_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_13_fu_782_p10);

    mux_84_16_1_1_U373 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_03279996_lcssa1175_reload,
        din1 => conv_i_i_i23901092_lcssa1239_reload,
        din2 => p_0_0_03279993_lcssa1173_reload,
        din3 => conv_i_i_i23901089_lcssa1237_reload,
        din4 => p_0_0_03279990_lcssa1171_reload,
        din5 => conv_i_i_i23901086_lcssa1235_reload,
        din6 => p_0_0_03279999_lcssa1177_reload,
        din7 => conv_i_i_i23901095_lcssa1241_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_14_fu_804_p10);

    mux_84_16_1_1_U374 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_032781044_lcssa1207_reload,
        din1 => p_0_0_032791140_lcssa1271_reload,
        din2 => p_0_0_032781041_lcssa1205_reload,
        din3 => p_0_0_032791137_lcssa1269_reload,
        din4 => p_0_0_032781038_lcssa1203_reload,
        din5 => p_0_0_032791134_lcssa1267_reload,
        din6 => p_0_0_032781047_lcssa1209_reload,
        din7 => p_0_0_032791143_lcssa1273_reload,
        din8 => select_ln250_fu_629_p3,
        dout => tmp_15_fu_826_p10);

    mux_84_16_1_1_U375 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_8_fu_672_p10,
        din1 => tmp_9_fu_694_p10,
        din2 => tmp_10_fu_716_p10,
        din3 => tmp_11_fu_738_p10,
        din4 => tmp_12_fu_760_p10,
        din5 => tmp_13_fu_782_p10,
        din6 => tmp_14_fu_804_p10,
        din7 => tmp_15_fu_826_p10,
        din8 => select_ln250_1_fu_637_p3,
        dout => tmp_16_fu_848_p10);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln250_fu_599_p2 = ap_const_lv1_0)) then 
                    i_fu_176 <= select_ln250_1_fu_637_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_176 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln250_fu_599_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_180 <= add_ln250_1_fu_605_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_180 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln250_fu_599_p2 = ap_const_lv1_0)) then 
                    j_fu_172 <= add_ln251_fu_871_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_172 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    R_address0 <= zext_ln252_1_fu_667_p1(6 - 1 downto 0);

    R_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_ce0 <= ap_const_logic_1;
        else 
            R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    R_d0 <= tmp_16_fu_848_p10;

    R_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln250_fu_599_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln250_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_we0 <= ap_const_logic_1;
        else 
            R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln250_1_fu_605_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln250_fu_617_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln251_fu_871_p2 <= std_logic_vector(unsigned(select_ln250_fu_629_p3) + unsigned(ap_const_lv4_1));
    add_ln252_fu_661_p2 <= std_logic_vector(unsigned(tmp_62_cast_fu_649_p3) + unsigned(zext_ln252_fu_657_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln250_fu_599_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln250_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_176)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_176;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_180)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_180;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, j_fu_172, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_172;
        end if; 
    end process;

    icmp_ln250_fu_599_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln251_fu_623_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    select_ln250_1_fu_637_p3 <= 
        add_ln250_fu_617_p2 when (icmp_ln251_fu_623_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln250_fu_629_p3 <= 
        ap_const_lv4_0 when (icmp_ln251_fu_623_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_62_cast_fu_649_p3 <= (trunc_ln252_fu_645_p1 & ap_const_lv3_0);
    trunc_ln252_fu_645_p1 <= select_ln250_1_fu_637_p3(3 - 1 downto 0);
    zext_ln252_1_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln252_fu_661_p2),64));
    zext_ln252_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln250_fu_629_p3),6));
end behav;
