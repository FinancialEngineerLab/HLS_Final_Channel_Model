// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_Rayleigh_Pipeline_VITIS_LOOP_60_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        x_rvd_address0,
        x_rvd_ce0,
        x_rvd_we0,
        x_rvd_d0,
        x_rvd_address1,
        x_rvd_ce1,
        x_rvd_we1,
        x_rvd_d1,
        p_read4,
        p_read5,
        p_read6,
        p_read7
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
output  [2:0] x_rvd_address0;
output   x_rvd_ce0;
output   x_rvd_we0;
output  [63:0] x_rvd_d0;
output  [2:0] x_rvd_address1;
output   x_rvd_ce1;
output   x_rvd_we1;
output  [63:0] x_rvd_d1;
input  [63:0] p_read4;
input  [63:0] p_read5;
input  [63:0] p_read6;
input  [63:0] p_read7;

reg ap_idle;
reg x_rvd_ce0;
reg x_rvd_we0;
reg x_rvd_ce1;
reg x_rvd_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln60_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln61_fu_170_p1;
wire   [63:0] zext_ln62_fu_196_p1;
reg   [2:0] i_fu_48;
wire   [2:0] add_ln60_fu_139_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_4;
wire   [63:0] tmp_6_fu_149_p6;
wire   [63:0] tmp_s_fu_175_p6;
wire   [1:0] trunc_ln61_fu_145_p1;
wire   [2:0] shl_ln61_fu_164_p2;
wire   [2:0] or_ln62_fu_190_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

TOP_mux_42_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_42_64_1_1_U96(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(p_read3),
    .din4(trunc_ln61_fu_145_p1),
    .dout(tmp_6_fu_149_p6)
);

TOP_mux_42_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_42_64_1_1_U97(
    .din0(p_read4),
    .din1(p_read5),
    .din2(p_read6),
    .din3(p_read7),
    .din4(trunc_ln61_fu_145_p1),
    .dout(tmp_s_fu_175_p6)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln60_fu_133_p2 == 1'd0)) begin
            i_fu_48 <= add_ln60_fu_139_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 3'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_133_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_4 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        x_rvd_ce0 = 1'b1;
    end else begin
        x_rvd_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        x_rvd_ce1 = 1'b1;
    end else begin
        x_rvd_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        x_rvd_we0 = 1'b1;
    end else begin
        x_rvd_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_133_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        x_rvd_we1 = 1'b1;
    end else begin
        x_rvd_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln60_fu_139_p2 = (ap_sig_allocacmp_i_4 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln60_fu_133_p2 = ((ap_sig_allocacmp_i_4 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln62_fu_190_p2 = (shl_ln61_fu_164_p2 | 3'd1);

assign shl_ln61_fu_164_p2 = ap_sig_allocacmp_i_4 << 3'd1;

assign trunc_ln61_fu_145_p1 = ap_sig_allocacmp_i_4[1:0];

assign x_rvd_address0 = zext_ln62_fu_196_p1;

assign x_rvd_address1 = zext_ln61_fu_170_p1;

assign x_rvd_d0 = tmp_s_fu_175_p6;

assign x_rvd_d1 = tmp_6_fu_149_p6;

assign zext_ln61_fu_170_p1 = shl_ln61_fu_164_p2;

assign zext_ln62_fu_196_p1 = or_ln62_fu_190_p2;

endmodule //TOP_Rayleigh_Pipeline_VITIS_LOOP_60_5
