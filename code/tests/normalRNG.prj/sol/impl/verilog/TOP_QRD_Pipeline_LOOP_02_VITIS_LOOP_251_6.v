// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_251_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        R_address0,
        R_ce0,
        R_we0,
        R_d0,
        p_0_0_03279985_lcssa1167_reload,
        conv_i_i_i23901081_lcssa1231_reload,
        p_0_0_03279982_lcssa1165_reload,
        conv_i_i_i23901078_lcssa1229_reload,
        p_0_0_03279979_lcssa1163_reload,
        conv_i_i_i23901075_lcssa1227_reload,
        p_0_0_03279988_lcssa1169_reload,
        conv_i_i_i23901084_lcssa1233_reload,
        p_0_0_032781033_lcssa1199_reload,
        p_0_0_032791129_lcssa1263_reload,
        p_0_0_032781030_lcssa1197_reload,
        p_0_0_032791126_lcssa1261_reload,
        p_0_0_032781027_lcssa1195_reload,
        p_0_0_032791123_lcssa1259_reload,
        p_0_0_032781036_lcssa1201_reload,
        p_0_0_032791132_lcssa1265_reload,
        p_0_0_03279972_lcssa1159_reload,
        conv_i_i_i23901068_lcssa1223_reload,
        p_0_0_03279969_lcssa1157_reload,
        conv_i_i_i23901065_lcssa1221_reload,
        p_0_0_03279966_lcssa1155_reload,
        conv_i_i_i23901062_lcssa1219_reload,
        p_0_0_03279975_lcssa1161_reload,
        conv_i_i_i23901071_lcssa1225_reload,
        p_0_0_032781020_lcssa1191_reload,
        p_0_0_032791116_lcssa1255_reload,
        p_0_0_032781017_lcssa1189_reload,
        p_0_0_032791113_lcssa1253_reload,
        p_0_0_032781014_lcssa1187_reload,
        p_0_0_032791110_lcssa1251_reload,
        p_0_0_032781023_lcssa1193_reload,
        p_0_0_032791119_lcssa1257_reload,
        p_0_0_03279960_lcssa1151_reload,
        conv_i_i_i23901056_lcssa1215_reload,
        p_0_0_03279957_lcssa1149_reload,
        conv_i_i_i23901053_lcssa1213_reload,
        p_0_0_03279954_lcssa1147_reload,
        conv_i_i_i23901050_lcssa1211_reload,
        p_0_0_03279963_lcssa1153_reload,
        conv_i_i_i23901059_lcssa1217_reload,
        p_0_0_032781008_lcssa1183_reload,
        p_0_0_032791104_lcssa1247_reload,
        p_0_0_032781005_lcssa1181_reload,
        p_0_0_032791101_lcssa1245_reload,
        p_0_0_032781002_lcssa1179_reload,
        p_0_0_032791098_lcssa1243_reload,
        p_0_0_032781011_lcssa1185_reload,
        p_0_0_032791107_lcssa1249_reload,
        p_0_0_03279996_lcssa1175_reload,
        conv_i_i_i23901092_lcssa1239_reload,
        p_0_0_03279993_lcssa1173_reload,
        conv_i_i_i23901089_lcssa1237_reload,
        p_0_0_03279990_lcssa1171_reload,
        conv_i_i_i23901086_lcssa1235_reload,
        p_0_0_03279999_lcssa1177_reload,
        conv_i_i_i23901095_lcssa1241_reload,
        p_0_0_032781044_lcssa1207_reload,
        p_0_0_032791140_lcssa1271_reload,
        p_0_0_032781041_lcssa1205_reload,
        p_0_0_032791137_lcssa1269_reload,
        p_0_0_032781038_lcssa1203_reload,
        p_0_0_032791134_lcssa1267_reload,
        p_0_0_032781047_lcssa1209_reload,
        p_0_0_032791143_lcssa1273_reload
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] R_address0;
output   R_ce0;
output   R_we0;
output  [15:0] R_d0;
input  [15:0] p_0_0_03279985_lcssa1167_reload;
input  [15:0] conv_i_i_i23901081_lcssa1231_reload;
input  [15:0] p_0_0_03279982_lcssa1165_reload;
input  [15:0] conv_i_i_i23901078_lcssa1229_reload;
input  [15:0] p_0_0_03279979_lcssa1163_reload;
input  [15:0] conv_i_i_i23901075_lcssa1227_reload;
input  [15:0] p_0_0_03279988_lcssa1169_reload;
input  [15:0] conv_i_i_i23901084_lcssa1233_reload;
input  [15:0] p_0_0_032781033_lcssa1199_reload;
input  [15:0] p_0_0_032791129_lcssa1263_reload;
input  [15:0] p_0_0_032781030_lcssa1197_reload;
input  [15:0] p_0_0_032791126_lcssa1261_reload;
input  [15:0] p_0_0_032781027_lcssa1195_reload;
input  [15:0] p_0_0_032791123_lcssa1259_reload;
input  [15:0] p_0_0_032781036_lcssa1201_reload;
input  [15:0] p_0_0_032791132_lcssa1265_reload;
input  [15:0] p_0_0_03279972_lcssa1159_reload;
input  [15:0] conv_i_i_i23901068_lcssa1223_reload;
input  [15:0] p_0_0_03279969_lcssa1157_reload;
input  [15:0] conv_i_i_i23901065_lcssa1221_reload;
input  [15:0] p_0_0_03279966_lcssa1155_reload;
input  [15:0] conv_i_i_i23901062_lcssa1219_reload;
input  [15:0] p_0_0_03279975_lcssa1161_reload;
input  [15:0] conv_i_i_i23901071_lcssa1225_reload;
input  [15:0] p_0_0_032781020_lcssa1191_reload;
input  [15:0] p_0_0_032791116_lcssa1255_reload;
input  [15:0] p_0_0_032781017_lcssa1189_reload;
input  [15:0] p_0_0_032791113_lcssa1253_reload;
input  [15:0] p_0_0_032781014_lcssa1187_reload;
input  [15:0] p_0_0_032791110_lcssa1251_reload;
input  [15:0] p_0_0_032781023_lcssa1193_reload;
input  [15:0] p_0_0_032791119_lcssa1257_reload;
input  [15:0] p_0_0_03279960_lcssa1151_reload;
input  [15:0] conv_i_i_i23901056_lcssa1215_reload;
input  [15:0] p_0_0_03279957_lcssa1149_reload;
input  [15:0] conv_i_i_i23901053_lcssa1213_reload;
input  [15:0] p_0_0_03279954_lcssa1147_reload;
input  [15:0] conv_i_i_i23901050_lcssa1211_reload;
input  [15:0] p_0_0_03279963_lcssa1153_reload;
input  [15:0] conv_i_i_i23901059_lcssa1217_reload;
input  [15:0] p_0_0_032781008_lcssa1183_reload;
input  [15:0] p_0_0_032791104_lcssa1247_reload;
input  [15:0] p_0_0_032781005_lcssa1181_reload;
input  [15:0] p_0_0_032791101_lcssa1245_reload;
input  [15:0] p_0_0_032781002_lcssa1179_reload;
input  [15:0] p_0_0_032791098_lcssa1243_reload;
input  [15:0] p_0_0_032781011_lcssa1185_reload;
input  [15:0] p_0_0_032791107_lcssa1249_reload;
input  [15:0] p_0_0_03279996_lcssa1175_reload;
input  [15:0] conv_i_i_i23901092_lcssa1239_reload;
input  [15:0] p_0_0_03279993_lcssa1173_reload;
input  [15:0] conv_i_i_i23901089_lcssa1237_reload;
input  [15:0] p_0_0_03279990_lcssa1171_reload;
input  [15:0] conv_i_i_i23901086_lcssa1235_reload;
input  [15:0] p_0_0_03279999_lcssa1177_reload;
input  [15:0] conv_i_i_i23901095_lcssa1241_reload;
input  [15:0] p_0_0_032781044_lcssa1207_reload;
input  [15:0] p_0_0_032791140_lcssa1271_reload;
input  [15:0] p_0_0_032781041_lcssa1205_reload;
input  [15:0] p_0_0_032791137_lcssa1269_reload;
input  [15:0] p_0_0_032781038_lcssa1203_reload;
input  [15:0] p_0_0_032791134_lcssa1267_reload;
input  [15:0] p_0_0_032781047_lcssa1209_reload;
input  [15:0] p_0_0_032791143_lcssa1273_reload;

reg ap_idle;
reg R_ce0;
reg R_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln250_fu_599_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln252_1_fu_667_p1;
reg   [3:0] j_fu_172;
wire   [3:0] add_ln251_fu_871_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_176;
wire   [3:0] select_ln250_1_fu_637_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten_fu_180;
wire   [6:0] add_ln250_1_fu_605_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [15:0] tmp_16_fu_848_p10;
wire   [0:0] icmp_ln251_fu_623_p2;
wire   [3:0] add_ln250_fu_617_p2;
wire   [2:0] trunc_ln252_fu_645_p1;
wire   [3:0] select_ln250_fu_629_p3;
wire   [5:0] tmp_62_cast_fu_649_p3;
wire   [5:0] zext_ln252_fu_657_p1;
wire   [5:0] add_ln252_fu_661_p2;
wire   [15:0] tmp_8_fu_672_p10;
wire   [15:0] tmp_9_fu_694_p10;
wire   [15:0] tmp_10_fu_716_p10;
wire   [15:0] tmp_11_fu_738_p10;
wire   [15:0] tmp_12_fu_760_p10;
wire   [15:0] tmp_13_fu_782_p10;
wire   [15:0] tmp_14_fu_804_p10;
wire   [15:0] tmp_15_fu_826_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U367(
    .din0(p_0_0_03279985_lcssa1167_reload),
    .din1(conv_i_i_i23901081_lcssa1231_reload),
    .din2(p_0_0_03279982_lcssa1165_reload),
    .din3(conv_i_i_i23901078_lcssa1229_reload),
    .din4(p_0_0_03279979_lcssa1163_reload),
    .din5(conv_i_i_i23901075_lcssa1227_reload),
    .din6(p_0_0_03279988_lcssa1169_reload),
    .din7(conv_i_i_i23901084_lcssa1233_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_8_fu_672_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U368(
    .din0(p_0_0_032781033_lcssa1199_reload),
    .din1(p_0_0_032791129_lcssa1263_reload),
    .din2(p_0_0_032781030_lcssa1197_reload),
    .din3(p_0_0_032791126_lcssa1261_reload),
    .din4(p_0_0_032781027_lcssa1195_reload),
    .din5(p_0_0_032791123_lcssa1259_reload),
    .din6(p_0_0_032781036_lcssa1201_reload),
    .din7(p_0_0_032791132_lcssa1265_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_9_fu_694_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U369(
    .din0(p_0_0_03279972_lcssa1159_reload),
    .din1(conv_i_i_i23901068_lcssa1223_reload),
    .din2(p_0_0_03279969_lcssa1157_reload),
    .din3(conv_i_i_i23901065_lcssa1221_reload),
    .din4(p_0_0_03279966_lcssa1155_reload),
    .din5(conv_i_i_i23901062_lcssa1219_reload),
    .din6(p_0_0_03279975_lcssa1161_reload),
    .din7(conv_i_i_i23901071_lcssa1225_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_10_fu_716_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U370(
    .din0(p_0_0_032781020_lcssa1191_reload),
    .din1(p_0_0_032791116_lcssa1255_reload),
    .din2(p_0_0_032781017_lcssa1189_reload),
    .din3(p_0_0_032791113_lcssa1253_reload),
    .din4(p_0_0_032781014_lcssa1187_reload),
    .din5(p_0_0_032791110_lcssa1251_reload),
    .din6(p_0_0_032781023_lcssa1193_reload),
    .din7(p_0_0_032791119_lcssa1257_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_11_fu_738_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U371(
    .din0(p_0_0_03279960_lcssa1151_reload),
    .din1(conv_i_i_i23901056_lcssa1215_reload),
    .din2(p_0_0_03279957_lcssa1149_reload),
    .din3(conv_i_i_i23901053_lcssa1213_reload),
    .din4(p_0_0_03279954_lcssa1147_reload),
    .din5(conv_i_i_i23901050_lcssa1211_reload),
    .din6(p_0_0_03279963_lcssa1153_reload),
    .din7(conv_i_i_i23901059_lcssa1217_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_12_fu_760_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U372(
    .din0(p_0_0_032781008_lcssa1183_reload),
    .din1(p_0_0_032791104_lcssa1247_reload),
    .din2(p_0_0_032781005_lcssa1181_reload),
    .din3(p_0_0_032791101_lcssa1245_reload),
    .din4(p_0_0_032781002_lcssa1179_reload),
    .din5(p_0_0_032791098_lcssa1243_reload),
    .din6(p_0_0_032781011_lcssa1185_reload),
    .din7(p_0_0_032791107_lcssa1249_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_13_fu_782_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U373(
    .din0(p_0_0_03279996_lcssa1175_reload),
    .din1(conv_i_i_i23901092_lcssa1239_reload),
    .din2(p_0_0_03279993_lcssa1173_reload),
    .din3(conv_i_i_i23901089_lcssa1237_reload),
    .din4(p_0_0_03279990_lcssa1171_reload),
    .din5(conv_i_i_i23901086_lcssa1235_reload),
    .din6(p_0_0_03279999_lcssa1177_reload),
    .din7(conv_i_i_i23901095_lcssa1241_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_14_fu_804_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U374(
    .din0(p_0_0_032781044_lcssa1207_reload),
    .din1(p_0_0_032791140_lcssa1271_reload),
    .din2(p_0_0_032781041_lcssa1205_reload),
    .din3(p_0_0_032791137_lcssa1269_reload),
    .din4(p_0_0_032781038_lcssa1203_reload),
    .din5(p_0_0_032791134_lcssa1267_reload),
    .din6(p_0_0_032781047_lcssa1209_reload),
    .din7(p_0_0_032791143_lcssa1273_reload),
    .din8(select_ln250_fu_629_p3),
    .dout(tmp_15_fu_826_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U375(
    .din0(tmp_8_fu_672_p10),
    .din1(tmp_9_fu_694_p10),
    .din2(tmp_10_fu_716_p10),
    .din3(tmp_11_fu_738_p10),
    .din4(tmp_12_fu_760_p10),
    .din5(tmp_13_fu_782_p10),
    .din6(tmp_14_fu_804_p10),
    .din7(tmp_15_fu_826_p10),
    .din8(select_ln250_1_fu_637_p3),
    .dout(tmp_16_fu_848_p10)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln250_fu_599_p2 == 1'd0)) begin
            i_fu_176 <= select_ln250_1_fu_637_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_176 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln250_fu_599_p2 == 1'd0)) begin
            indvar_flatten_fu_180 <= add_ln250_1_fu_605_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_180 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln250_fu_599_p2 == 1'd0)) begin
            j_fu_172 <= add_ln251_fu_871_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_172 <= 4'd0;
        end
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        R_ce0 = 1'b1;
    end else begin
        R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln250_fu_599_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R_we0 = 1'b1;
    end else begin
        R_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln250_fu_599_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_176;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_180;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_172;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R_address0 = zext_ln252_1_fu_667_p1;

assign R_d0 = tmp_16_fu_848_p10;

assign add_ln250_1_fu_605_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln250_fu_617_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln251_fu_871_p2 = (select_ln250_fu_629_p3 + 4'd1);

assign add_ln252_fu_661_p2 = (tmp_62_cast_fu_649_p3 + zext_ln252_fu_657_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln250_fu_599_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_623_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln250_1_fu_637_p3 = ((icmp_ln251_fu_623_p2[0:0] == 1'b1) ? add_ln250_fu_617_p2 : ap_sig_allocacmp_i_load);

assign select_ln250_fu_629_p3 = ((icmp_ln251_fu_623_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_62_cast_fu_649_p3 = {{trunc_ln252_fu_645_p1}, {3'd0}};

assign trunc_ln252_fu_645_p1 = select_ln250_1_fu_637_p3[2:0];

assign zext_ln252_1_fu_667_p1 = add_ln252_fu_661_p2;

assign zext_ln252_fu_657_p1 = select_ln250_fu_629_p3;

endmodule //TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_251_6
