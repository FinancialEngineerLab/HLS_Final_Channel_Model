// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_Modulation_Pipeline_VITIS_LOOP_60_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rand_bipolar_address0,
        rand_bipolar_ce0,
        rand_bipolar_q0,
        rand_bipolar_address1,
        rand_bipolar_ce1,
        rand_bipolar_q1,
        xr_2_write_assign_out,
        xr_2_write_assign_out_ap_vld,
        xr_3_write_assign_out,
        xr_3_write_assign_out_ap_vld,
        xr_1_write_assign_out,
        xr_1_write_assign_out_ap_vld,
        xi_0_write_assign_out,
        xi_0_write_assign_out_ap_vld,
        xi_1_write_assign_out,
        xi_1_write_assign_out_ap_vld,
        xr_0_write_assign_out,
        xr_0_write_assign_out_ap_vld,
        xi_2_write_assign_out,
        xi_2_write_assign_out_ap_vld,
        xi_3_write_assign_out,
        xi_3_write_assign_out_ap_vld,
        grp_fu_3389_p_din0,
        grp_fu_3389_p_din1,
        grp_fu_3389_p_dout0,
        grp_fu_3389_p_ce,
        grp_fu_3393_p_din0,
        grp_fu_3393_p_din1,
        grp_fu_3393_p_dout0,
        grp_fu_3393_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] rand_bipolar_address0;
output   rand_bipolar_ce0;
input  [63:0] rand_bipolar_q0;
output  [1:0] rand_bipolar_address1;
output   rand_bipolar_ce1;
input  [63:0] rand_bipolar_q1;
output  [63:0] xr_2_write_assign_out;
output   xr_2_write_assign_out_ap_vld;
output  [63:0] xr_3_write_assign_out;
output   xr_3_write_assign_out_ap_vld;
output  [63:0] xr_1_write_assign_out;
output   xr_1_write_assign_out_ap_vld;
output  [63:0] xi_0_write_assign_out;
output   xi_0_write_assign_out_ap_vld;
output  [63:0] xi_1_write_assign_out;
output   xi_1_write_assign_out_ap_vld;
output  [63:0] xr_0_write_assign_out;
output   xr_0_write_assign_out_ap_vld;
output  [63:0] xi_2_write_assign_out;
output   xi_2_write_assign_out_ap_vld;
output  [63:0] xi_3_write_assign_out;
output   xi_3_write_assign_out_ap_vld;
output  [63:0] grp_fu_3389_p_din0;
output  [63:0] grp_fu_3389_p_din1;
input  [63:0] grp_fu_3389_p_dout0;
output   grp_fu_3389_p_ce;
output  [63:0] grp_fu_3393_p_din0;
output  [63:0] grp_fu_3393_p_din1;
input  [63:0] grp_fu_3393_p_dout0;
output   grp_fu_3393_p_ce;

reg ap_idle;
reg rand_bipolar_ce0;
reg rand_bipolar_ce1;
reg xr_2_write_assign_out_ap_vld;
reg xr_3_write_assign_out_ap_vld;
reg xr_1_write_assign_out_ap_vld;
reg xi_0_write_assign_out_ap_vld;
reg xi_1_write_assign_out_ap_vld;
reg xr_0_write_assign_out_ap_vld;
reg xi_2_write_assign_out_ap_vld;
reg xi_3_write_assign_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln60_fu_191_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln60_reg_349;
reg   [0:0] icmp_ln60_reg_349_pp0_iter1_reg;
reg   [0:0] icmp_ln60_reg_349_pp0_iter2_reg;
reg   [0:0] icmp_ln60_reg_349_pp0_iter3_reg;
wire   [1:0] empty_296_fu_208_p1;
reg   [1:0] empty_296_reg_353;
reg   [1:0] empty_296_reg_353_pp0_iter1_reg;
reg   [1:0] empty_296_reg_353_pp0_iter2_reg;
reg   [1:0] empty_296_reg_353_pp0_iter3_reg;
reg   [1:0] empty_296_reg_353_pp0_iter4_reg;
wire   [63:0] i_16_cast10_fu_203_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln62_fu_212_p1;
reg   [2:0] i_fu_54;
wire   [2:0] add_ln60_fu_197_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_15;
reg   [63:0] xi_3_write_assign_fu_58;
reg   [63:0] xi_2_write_assign_fu_62;
reg   [63:0] xr_0_write_assign_fu_66;
reg   [63:0] xi_1_write_assign_fu_70;
reg   [63:0] xi_0_write_assign_fu_74;
reg   [63:0] xr_1_write_assign_fu_78;
reg   [63:0] xr_3_write_assign_fu_82;
reg   [63:0] xr_2_write_assign_fu_86;
wire    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln60_fu_191_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_54 <= add_ln60_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_296_reg_353_pp0_iter1_reg <= empty_296_reg_353;
        icmp_ln60_reg_349 <= icmp_ln60_fu_191_p2;
        icmp_ln60_reg_349_pp0_iter1_reg <= icmp_ln60_reg_349;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        empty_296_reg_353_pp0_iter2_reg <= empty_296_reg_353_pp0_iter1_reg;
        empty_296_reg_353_pp0_iter3_reg <= empty_296_reg_353_pp0_iter2_reg;
        empty_296_reg_353_pp0_iter4_reg <= empty_296_reg_353_pp0_iter3_reg;
        icmp_ln60_reg_349_pp0_iter2_reg <= icmp_ln60_reg_349_pp0_iter1_reg;
        icmp_ln60_reg_349_pp0_iter3_reg <= icmp_ln60_reg_349_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_191_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_296_reg_353 <= empty_296_fu_208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (empty_296_reg_353_pp0_iter4_reg == 2'd0))) begin
        xi_0_write_assign_fu_74 <= grp_fu_3393_p_dout0;
        xr_0_write_assign_fu_66 <= grp_fu_3389_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (empty_296_reg_353_pp0_iter4_reg == 2'd1))) begin
        xi_1_write_assign_fu_70 <= grp_fu_3393_p_dout0;
        xr_1_write_assign_fu_78 <= grp_fu_3389_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (empty_296_reg_353_pp0_iter4_reg == 2'd2))) begin
        xi_2_write_assign_fu_62 <= grp_fu_3393_p_dout0;
        xr_2_write_assign_fu_86 <= grp_fu_3389_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (empty_296_reg_353_pp0_iter4_reg == 2'd3))) begin
        xi_3_write_assign_fu_58 <= grp_fu_3393_p_dout0;
        xr_3_write_assign_fu_82 <= grp_fu_3389_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_191_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_15 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_15 = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rand_bipolar_ce0 = 1'b1;
    end else begin
        rand_bipolar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rand_bipolar_ce1 = 1'b1;
    end else begin
        rand_bipolar_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xi_0_write_assign_out_ap_vld = 1'b1;
    end else begin
        xi_0_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xi_1_write_assign_out_ap_vld = 1'b1;
    end else begin
        xi_1_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xi_2_write_assign_out_ap_vld = 1'b1;
    end else begin
        xi_2_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xi_3_write_assign_out_ap_vld = 1'b1;
    end else begin
        xi_3_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xr_0_write_assign_out_ap_vld = 1'b1;
    end else begin
        xr_0_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xr_1_write_assign_out_ap_vld = 1'b1;
    end else begin
        xr_1_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xr_2_write_assign_out_ap_vld = 1'b1;
    end else begin
        xr_2_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln60_reg_349_pp0_iter3_reg == 1'd1))) begin
        xr_3_write_assign_out_ap_vld = 1'b1;
    end else begin
        xr_3_write_assign_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln60_fu_197_p2 = (ap_sig_allocacmp_i_15 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_296_fu_208_p1 = ap_sig_allocacmp_i_15[1:0];

assign grp_fu_3389_p_ce = 1'b1;

assign grp_fu_3389_p_din0 = rand_bipolar_q1;

assign grp_fu_3389_p_din1 = 64'd4609047870845172685;

assign grp_fu_3393_p_ce = 1'b1;

assign grp_fu_3393_p_din0 = rand_bipolar_q0;

assign grp_fu_3393_p_din1 = 64'd4609047870845172685;

assign i_16_cast10_fu_203_p1 = ap_sig_allocacmp_i_15;

assign icmp_ln60_fu_191_p2 = ((ap_sig_allocacmp_i_15 == 3'd4) ? 1'b1 : 1'b0);

assign rand_bipolar_address0 = zext_ln62_fu_212_p1;

assign rand_bipolar_address1 = i_16_cast10_fu_203_p1;

assign xi_0_write_assign_out = xi_0_write_assign_fu_74;

assign xi_1_write_assign_out = xi_1_write_assign_fu_70;

assign xi_2_write_assign_out = xi_2_write_assign_fu_62;

assign xi_3_write_assign_out = xi_3_write_assign_fu_58;

assign xr_0_write_assign_out = xr_0_write_assign_fu_66;

assign xr_1_write_assign_out = xr_1_write_assign_fu_78;

assign xr_2_write_assign_out = xr_2_write_assign_fu_86;

assign xr_3_write_assign_out = xr_3_write_assign_fu_82;

assign zext_ln62_fu_212_p1 = empty_296_fu_208_p1;

endmodule //TOP_Modulation_Pipeline_VITIS_LOOP_60_3
